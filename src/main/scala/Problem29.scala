import scala.annotation.tailrec

object Problem29 extends App{
/*
Consider all integer combinations of ab for 2 = a = 5 and 2 = b = 5:

22=4, 23=8, 24=16, 25=32
32=9, 33=27, 34=81, 35=243
42=16, 43=64, 44=256, 45=1024
52=25, 53=125, 54=625, 55=3125
If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 = a = 100 and 2 = b = 100?
*/

/*
max: 5 Solution:15
max: 6 Solution:23
max: 7 Solution:34
max: 8 Solution:44
max: 9 Solution:54
max: 10 Solution:69
max: 11 Solution:88
max: 12 Solution:106
max: 13 Solution:129
max: 14 Solution:152
max: 15 Solution:177
max: 16 Solution:195
max: 17 Solution:226
max: 18 Solution:256
max: 19 Solution:291
max: 20 Solution:324
max: 21 Solution:361
max: 22 Solution:399
max: 23 Solution:442
max: 24 Solution:483
max: 25 Solution:519
max: 26 Solution:564
max: 27 Solution:600
max: 28 Solution:648
max: 29 Solution:703
max: 30 Solution:755
max: 31 Solution:814
max: 32 Solution:856
max: 33 Solution:915
max: 34 Solution:976
max: 35 Solution:1039
max: 36 Solution:1085
max: 37 Solution:1156
max: 38 Solution:1224
max: 39 Solution:1295
max: 40 Solution:1365
max: 41 Solution:1444
max: 42 Solution:1519
max: 43 Solution:1602
max: 44 Solution:1681
max: 45 Solution:1762
max: 46 Solution:1846
max: 47 Solution:1937
max: 48 Solution:2023
max: 49 Solution:2095
max: 50 Solution:2184
*/  
  
  val max = 8
  val min = 2

  val table = new Array[Int](max+1)
  def remove(a: Int){
    def r(p: Int) : Unit = if( p <= max ){
      table(p) = a
      r(p*a)
    }
    r(a)
    //println( s"  remove $a -> ${table.mkString(",")}" );
  }
  
  val values = for( a <- min to max ) yield {
    val count = if( table(a) != 0 ){
      val minus = (max*Math.log(table(a))/Math.log(a)).toInt - 1
      println( s"  $a -> a previous power ${table(a)} -> minus:$minus" )
      max - min -  minus + 1
    }
    else{
      println( s"  $a -> not a previous power" )
      max - min  + 1
    }
    remove(a)
    println( s"$a -> $count" )
    count
  }
  
  val solution = values.sum
  
  println( s"Solution:$solution" )

}
  

