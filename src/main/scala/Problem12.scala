import scala.annotation.tailrec

/**
 * Created with IntelliJ IDEA.
 * User: alvaro
 * Date: 16/01/14
 * Time: 11:07
 * To change this template use File | Settings | File Templates.
 */
object Problem12 extends App {

  /*
  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


   */

  type Numero = Long

  lazy val primes: Stream[Numero] = {
    def next(p: Numero): Stream[Numero] = {

      def isPrime(n: Numero) = {
        val ret = primes.dropWhile(p => p * p <= n && n % p != 0)
        ret.head * ret.head > n
      }

      @tailrec
      def nextPrime(v: Numero): Numero = if (isPrime(v)) v else (nextPrime(v + 1))

      val np = nextPrime(p + 1)
      np #:: next(np)
    }

    2 #:: 3 #:: next(3)
  }

  def primeFactors( n: Numero ): Map[Numero, Numero] = {

    @tailrec
    def pf( n: Numero, accum : List[Numero] ) : List[Numero] = n match {
      case 0 => accum
      case 1 => accum
      case _ =>
        val factor = primes.find( p => n % p == 0 ).get
        pf( n/factor, factor :: accum )
    }

    val factors = pf( n, Nil )
    factors.groupBy(n => n).mapValues(_.size.asInstanceOf[Numero])
  }

  def numberOfDivisors( n: Numero ) = primeFactors(n).values.map(_+1).product

  lazy val triangularNumbers : Stream[Numero] = {
    1 #:: triangularNumbers.zipWithIndex.map{ case (t, i) => t + i + 2 }
  }

  val solution = triangularNumbers.find( t => numberOfDivisors(t) > 500 )

  println( s"Solution: $solution" )
}
